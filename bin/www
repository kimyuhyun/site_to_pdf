const app = require("../app");
const http = require("http");

const port = normalizePort(process.env.PORT || "9001");
app.set("port", port);

const server = http.createServer(app);

server.listen(port, "0.0.0.0", function () {
    var os = require("os");
    var ifaces = os.networkInterfaces();
    var result = "";
    var alias = 0;
    for (var dev in ifaces) {
        ifaces[dev].forEach(function (details) {
            if (details.family == "IPv4" && details.internal === false && details.address.startsWith("172")) {
                result = details.address;
                alias++;
            }
        });
        if (alias === 0) {
            ifaces[dev].forEach(function (details) {
                if (details.family == "IPv4" && details.internal === false && details.address.startsWith("192")) {
                    result = details.address;
                    alias++;
                }
            });
        }
    }
    console.log(`http://${result}:${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }
    return false;
}

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;

        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    console.log("Listening on " + bind);
}